# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Optional, Union


from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from petstore_api.models.primitive_string import PrimitiveString
    from petstore_api.models.info import Info

class BaseDiscriminator(BaseModel):
    """
    BaseDiscriminator
    """ # noqa: E501
    type_name: Optional[StrictStr] = Field(default=None, alias="_typeName")

    model_config = ConfigDict(
        validate_assignment=True,
        extra='allow',
    )
    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = '_typeName'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'string': 'PrimitiveString','Info': 'Info'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None


    # Deprecated. Use model_inst.model_dump_json(by_alias=True, exclude_unset=True) instead
    # def to_json(self) -> str:

    # Deprecated. Use BaseDiscriminator.model_validate_json(json_str)
    # @classmethod
    # def from_json(cls, json_str: str):

    # Deprecated. Use BaseDiscriminator.model_validate(obj)
    # @classmethod
    # def from_dict(cls, obj: Dict[str, Any]):



