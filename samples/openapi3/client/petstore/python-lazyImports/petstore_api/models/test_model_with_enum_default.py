# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Optional
from petstore_api.models.test_enum import TestEnum
from petstore_api.models.test_enum_with_default import TestEnumWithDefault


class TestModelWithEnumDefault(BaseModel):
    """
    TestModelWithEnumDefault
    """ # noqa: E501
    test_enum: TestEnum
    test_string: Optional[StrictStr] = None
    test_enum_with_default: Optional[TestEnumWithDefault] = TestEnumWithDefault.ZWEI
    test_string_with_default: Optional[StrictStr] = 'ahoy matey'
    test_inline_defined_enum_with_default: Optional[StrictStr] = 'B'

    @field_validator('test_inline_defined_enum_with_default')
    def test_inline_defined_enum_with_default_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['A', 'B', 'C']):
            raise ValueError("must be one of enum values ('A', 'B', 'C')")
        return value

    model_config = ConfigDict(
        validate_assignment=True,
        extra='allow',
    )

    # Deprecated. Use model_inst.model_dump_json(by_alias=True, exclude_unset=True) instead
    # def to_json(self) -> str:

    # Deprecated. Use TestModelWithEnumDefault.model_validate_json(json_str)
    # @classmethod
    # def from_json(cls, json_str: str):

    # Deprecated. Use TestModelWithEnumDefault.model_validate(obj)
    # @classmethod
    # def from_dict(cls, obj: Dict[str, Any]):



