# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Dict, Optional


class MapTest(BaseModel):
    """
    MapTest
    """ # noqa: E501
    map_map_of_string: Optional[Dict[str, Dict[str, StrictStr]]] = None
    map_of_enum_string: Optional[Dict[str, StrictStr]] = None
    direct_map: Optional[Dict[str, StrictBool]] = None
    indirect_map: Optional[Dict[str, StrictBool]] = None

    @field_validator('map_of_enum_string')
    def map_of_enum_string_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value.values():
            if i not in set(['UPPER', 'lower']):
                raise ValueError("dict values must be one of enum values ('UPPER', 'lower')")
        return value

    model_config = ConfigDict(
        validate_assignment=True,
        extra='forbid',
    )

    # Deprecated. Use model_inst.model_dump_json(by_alias=True, exclude_unset=True) instead
    # def to_json(self) -> str:

    # Deprecated. Use MapTest.model_validate_json(json_str)
    # @classmethod
    # def from_json(cls, json_str: str):

    # Deprecated. Use MapTest.model_validate(obj)
    # @classmethod
    # def from_dict(cls, obj: Dict[str, Any]):



