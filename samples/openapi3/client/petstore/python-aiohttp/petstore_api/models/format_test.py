# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from datetime import date, datetime
from decimal import Decimal
from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictInt, StrictStr
from typing import Optional, Tuple, Union
from typing_extensions import Annotated
from uuid import UUID


class FormatTest(BaseModel):
    """
    FormatTest
    """ # noqa: E501
    integer: Optional[Annotated[int, Field(le=100, strict=True, ge=10)]] = None
    int32: Optional[Annotated[int, Field(le=200, strict=True, ge=20)]] = None
    int64: Optional[StrictInt] = None
    number: Annotated[float, Field(le=543.2, ge=32.1)]
    var_float: Optional[Annotated[float, Field(le=987.6, ge=54.3)]] = Field(default=None, alias="float")
    double: Optional[Annotated[float, Field(le=123.4, ge=67.8)]] = None
    decimal: Optional[Decimal] = None
    string: Optional[str] = Field(default=None, pattern="/[a-z]/i")
    string_with_double_quote_pattern: Optional[str] = Field(default=None, pattern="/this is "something"/")
    byte: Optional[Union[StrictBytes, StrictStr]] = None
    binary: Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]] = None
    var_date: date = Field(alias="date")
    date_time: Optional[datetime] = Field(default=None, alias="dateTime")
    uuid: Optional[UUID] = None
    password: Annotated[str, Field(min_length=10, max_length=64)] = Field(strict=True)
    pattern_with_digits: Optional[str] = Field(default=None, pattern="/^\d{10}$/", description="A string that is a 10 digit number. Can have leading zeros.")
    pattern_with_digits_and_delimiter: Optional[str] = Field(default=None, pattern="/^image_\d{1,3}$/i", description="A string starting with 'image_' (case insensitive) and one to three digits following i.e. Image_01.")

    model_config = ConfigDict(
        validate_assignment=True,
        extra='forbid',
    )

    # Deprecated. Use model_inst.model_dump_json(by_alias=True, exclude_unset=True) instead
    # def to_json(self) -> str:

    # Deprecated. Use FormatTest.model_validate_json(json_str)
    # @classmethod
    # def from_json(cls, json_str: str):

    # Deprecated. Use FormatTest.model_validate(obj)
    # @classmethod
    # def from_dict(cls, obj: Dict[str, Any]):



