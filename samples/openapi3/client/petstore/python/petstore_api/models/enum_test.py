# coding: utf-8

"""
    OpenAPI Petstore

    This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: \" \\

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional
from petstore_api.models.enum_number_vendor_ext import EnumNumberVendorExt
from petstore_api.models.enum_string_vendor_ext import EnumStringVendorExt
from petstore_api.models.outer_enum import OuterEnum
from petstore_api.models.outer_enum_default_value import OuterEnumDefaultValue
from petstore_api.models.outer_enum_integer import OuterEnumInteger
from petstore_api.models.outer_enum_integer_default_value import OuterEnumIntegerDefaultValue


class EnumTest(BaseModel):
    """
    EnumTest
    """ # noqa: E501
    enum_string: Optional[StrictStr] = None
    enum_string_required: StrictStr
    enum_integer_default: Optional[StrictInt] = 5
    enum_integer: Optional[StrictInt] = None
    enum_number: Optional[StrictFloat] = None
    enum_string_single_member: Optional[StrictStr] = None
    enum_integer_single_member: Optional[StrictInt] = None
    outer_enum: Optional[OuterEnum] = Field(default=None, alias="outerEnum")
    outer_enum_integer: Optional[OuterEnumInteger] = Field(default=None, alias="outerEnumInteger")
    outer_enum_default_value: Optional[OuterEnumDefaultValue] = Field(default=OuterEnumDefaultValue.PLACED, alias="outerEnumDefaultValue")
    outer_enum_integer_default_value: Optional[OuterEnumIntegerDefaultValue] = Field(default=OuterEnumIntegerDefaultValue.NUMBER_0, alias="outerEnumIntegerDefaultValue")
    enum_number_vendor_ext: Optional[EnumNumberVendorExt] = Field(default=None, alias="enumNumberVendorExt")
    enum_string_vendor_ext: Optional[EnumStringVendorExt] = Field(default=None, alias="enumStringVendorExt")

    @field_validator('enum_string')
    def enum_string_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UPPER', 'lower', '']):
            raise ValueError("must be one of enum values ('UPPER', 'lower', '')")
        return value

    @field_validator('enum_string_required')
    def enum_string_required_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['UPPER', 'lower', '']):
            raise ValueError("must be one of enum values ('UPPER', 'lower', '')")
        return value

    @field_validator('enum_integer_default')
    def enum_integer_default_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, 5, 14]):
            raise ValueError("must be one of enum values (1, 5, 14)")
        return value

    @field_validator('enum_integer')
    def enum_integer_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1, -1]):
            raise ValueError("must be one of enum values (1, -1)")
        return value

    @field_validator('enum_number')
    def enum_number_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([1.1, -1.2]):
            raise ValueError("must be one of enum values (1.1, -1.2)")
        return value

    @field_validator('enum_string_single_member')
    def enum_string_single_member_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['abc']):
            raise ValueError("must be one of enum values ('abc')")
        return value

    @field_validator('enum_integer_single_member')
    def enum_integer_single_member_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set([100]):
            raise ValueError("must be one of enum values (100)")
        return value

    model_config = ConfigDict(
        validate_assignment=True,
        extra='allow',
    )

    # Deprecated. Use model_inst.model_dump_json(by_alias=True, exclude_unset=True) instead
    # def to_json(self) -> str:

    # Deprecated. Use EnumTest.model_validate_json(json_str)
    # @classmethod
    # def from_json(cls, json_str: str):

    # Deprecated. Use EnumTest.model_validate(obj)
    # @classmethod
    # def from_dict(cls, obj: Dict[str, Any]):



